version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
                aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl  https://kvdb.io/6YVb82cT8ru7BMuKPGtVpt/migration_<< parameters.workflow_id >>) 
            echo $SUCCESS
            if [ $SUCCESS == 1 ]; 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          command: |
              cd backend
              npm install
              npm run test
            
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      
      # Restore from cache
      # Your job code here

  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: 
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout 
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
                  aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
                  aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                echo '[all]' > ~/inventory.txt
                aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                     --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/inventory.txt
                cat ~/inventory.txt
          
      - run:
          name: Installing tar
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root:  ~/
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["c5:6a:61:e4:a3:9c:d0:db:ad:39:c6:35:b3:65:6b:eb"] 
      - attach_workspace:
          at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
              apk add --update --no-cache openssh ansible tar gzip
              pip3 install awscli 
              rm -rf /var/cache/apk/*
      - run:
          name: Configure server
          command: |
                cd .circleci/ansible
                ansible-playbook -i  ~/inventory.txt configure-server.yml
                cat ~/inventory.txt
          no_output_timeout: 30m
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install awscli
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            ls
            cat migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              if grep -q "migrations" ~/project/backend/migrations_dump.txt
              then
              curl https://kvdb.io/6YVb82cT8ru7BMuKPGtVpt/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update
            sudo apt upgrade
            sudo apt install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                     --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
       - image: python:3.7-alpine3.11 
    steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["c5:6a:61:e4:a3:9c:d0:db:ad:39:c6:35:b3:65:6b:eb"] 
        - attach_workspace:
            at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
        - run:
            name: Install dependencies
            command: |
              # your code here
              apk add --update --no-cache openssh ansible tar gzip nodejs npm
              pip3 install awscli 
              rm -rf /var/cache/apk/*
        - run:
            name: Deploy backend
            command: |
              # your code here
              cd backend
              npm i
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              ls
              mv artifact.tar.gz .circleci/ansible/
              cd .circleci/ansible/
              echo "Contents  of the inventory.txt file is -------"
              cat ~/inventory.txt
              ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
        - destroy-environment:
            workflow_id:
                  ${CIRCLE_WORKFLOW_ID:0:7}  

  smoke-test:
    docker:
      # Lightweight Docker image
       - image: circleci/node:13.8.0 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update
            sudo apt upgrade
            sudo apt install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                     --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # echo $TYPEORM_CONNECTION
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                exit 0
              else
                exit 1
              fi
      - revert-migrations:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
            workflow_id:
                  ${CIRCLE_WORKFLOW_ID:0:7}  
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs tar gzip
      - run:
          name: Obtain old workflow ID
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text > ~/workflow_id.txt
              cat ~/workflow_id.txt
              pwd
              ls
      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       # your code here
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/cloudfront.yml \
      #       --stack-name InitialStack \
      #       --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - workflow_id.txt
      # Here's where you will add some code to rollback on failure
      # - revert-migrations:
      #     workflow_id:
      #           ${CIRCLE_WORKFLOW_ID:0:7} 
      # - destroy-environment:
      #       workflow_id:
      #             ${CIRCLE_WORKFLOW_ID:0:7}   

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Installing dependencies
            command: |
                yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Get successfully created stacks
            command: |
              # your code here            
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stack names: "${STACKS[@]}"      
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(cat ~/workflow_id.txt ) 
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:10:17}" ]]
              then
                # your code here
                aws s3 rm "s3://${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:17}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:17}"
              else
              echo "-------cannot clean up-------------------"
              fi
  # Fetch the Old workflow ID

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update
          # requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]